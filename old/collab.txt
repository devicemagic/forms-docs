Heroku Collaborators Quickstart Guide
=======================

Heroku is a new approach to deploying web applications. Forget
about servers; the fundamental unit is the app. Develop locally on your
machine just like you always do. When you're ready to deploy, use the Heroku
client gem to create your application in our cloud, then deploy with a
single `git push`. Git allows you to have multiple source repositories all
at the same time. By making Heroku just another source repository, you can
push your code and deploy your application in one easy step.

Heroku makes it easy to collaborate with others.  Collaborating allows you 
to share access to your source code, make any changes and push a new version 
of the application up quickly and easily.  

You can [start sharing](sharing) existing applications with a single command.  

New collaborators can get started by following these instructions:

Prerequisites
-------------

Before using Heroku there are three requirements:

  1. **Your local machine must be setup to run ruby applications:**
     [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html),
     [Developing Rails apps on Mac OS X](http://developer.apple.com/Tools/developonrailsleopard.html)

  2. **Install Git:** [On a Mac](http://github.com/guides/get-git-on-mac),
     [Windows](http://code.google.com/p/msysgit/), or
     [UNIX/Linux](http://book.git-scm.com/2_installing_git.html)

  3. [Install the Heroku gem](heroku-command)
  
Collaborating on an app
-----------------------

### Clone the code

The first step is to clone the git repo to your local machine.  The invitation email included the name of the app.  First ensure that your keys are already on Heroku.  If this is the first time you have ever used heroku, run:

    $ heroku keys:add
    
To clone the git repo, simply run this command, filling in the appropriate app name:

    :::term
    $ git clone git@heroku.com:APPNAME.git -o production
    
This will create a directory called APPNAME, with a full copy of the git repository.  It also sets up a git remote called "production".  If you'd prefer to name this something else (e.g. heroku, or staging), simply change the parameter after the -o flag.

### Edit and Deploy

You can now make any changes.  When you are ready to deploy these changes, simply commit and push your changes:

    :::term
    $ git commit -a -m "log of the changes I made"
    $ git push production master
    -----> Heroku receiving push
    -----> Launching.... done

