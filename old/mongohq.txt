# MongoHQ add-on

MongoHQ is a cloud-based hosted database solution that allows you to quickly and easily create and get your apps up and running with MongoDB. Through the MongoHQ add-on for Heroku, you can, with just a couple of steps, have a MongoDB instance running and available for your Heroku applications.

## Adding MongoHQ to your Heroku App

To add MongoHQ to your Heroku application, simply install the MongoHQ add-on:

    $ heroku addons:add mongohq:free

This will provision a database with MongoHQ and set the heroku evironment variable MONGOHQ_URL with a mongodb connect string.

Please note: In the beta release of the MongoHQ add-on, the provisioned databases have a hard limit of 16MB. Once the full version is available, different size and plan options will be available.


## Gem Options and Setup

You have a couple of options when deciding what method you will use for connecting your application to your Mongo database.  We will highlight these choices and you can use the gem that you feel works best for what you are trying to accomplish.

### MongoMapper

The mongo_mapper gem by John Nunemaker [http://rubygems.org/gems/mongo_mapper](http://rubygems.org/gems/mongo_mapper) is a Ruby object mapper for Mongo. It allows you to maintain the same ActiveRecord structure that you are familiar with in Rails, but utilize MongoDB instead.

### Mongoid

The mongoid gem, by Durran Jordan (blah) is a robust ODM framework that acts as an API to connect to documents within MongoDB.  More information can be found at: [http://mongoid.org/](http://mongoid.org/)

### Mongo Ruby Driver

If you are using mongo in such a way that you don't need an ODM then you can simply connect with the ruby driver for MongoDB. The mongo gem, maintained by Kyle Banker of 10gen [http://rubygems.org/gems/mongo](http://rubygems.org/gems/mongo) is an active project and more information about its use can be found at: [http://api.mongodb.org/ruby/current/index.html](http://api.mongodb.org/ruby/current/index.html).


## Using MongoMapper Gem in Rails

config/environment.rb
    
    # in your initializer block
    config.gem "mongo_mapper"
    
config/initializers/mongo.rb
    
    if ENV['MONGOHQ_URL']
      MongoMapper.config = {RAILS_ENV => {'uri' => ENV['MONGOHQ_URL']}}
    else
      MongoMapper.config = {RAILS_ENV => {'uri' => 'mongodb://localhost/sushi'}}
    end
    
    MongoMapper.connect(RAILS_ENV)


For more information on using MongoMapper to set up a basic application with Rails and MongoDB, we encourage you to check out Ryan Bates' screencast entitled "MongoDB and MongoMapper" at http://railscasts.com/episodes/194-mongodb-and-mongomapper.


## Using Mongo Ruby Driver


If you are using Ruby driver version >= 0.19

    require 'uri'
    require 'mongo'
    
    uri = URI.parse(ENV['MONGOHQ_URL'])
    conn = Mongo::Connection.from_uri(ENV['MONGOHQ_URL'])
    db = conn.db(uri.path.gsub(/^\//, ''))



If you are using Ruby driver version < 0.19

    require 'uri'
    require 'mongo'
    
    uri = URI.parse(ENV['MONGOHQ_URL'])
    conn = Mongo::Connection.new(uri.host, uri.port)
    db = conn.db(uri.path.gsub(/^\//, ''))
    db.authenticate(uri.user, uri.password)

## Logging into MongoHQ

Following the instructions [here](http://support.mongohq.com/discussions/community-tips/2-logging-in-to-mongohq-for-heroku-users), you can log into the MongoHQ interface and use features like mongodump and mongorestore

## Upgrading

We're currently, we're working on better integration with MongoHQ to allow seamless addon upgrades. In the meantime, you'll need to do the following:

- Backup your database. You can use the instructions [above](http://docs.heroku.com/mongohq#logging-into-mongohq) to get a local mongodump
- Remove the addon


    $ heroku addons:remove mongohq:free


- Upgrade the addon


    $ heroku addons:add mongohq:small


- Restore your database using mongorestore

## Known Issues

If you see the following error in your logs

    Mongo::ConfigurationError (Trying to connect directly to slave; if this is what you want, specify :slave_ok => true.):

try updating your mongo gem to the latest. You can do this by specifying a newer version of mongo in your .gems manifest or Gemfile. 1.0.7 and later should work.
