Deploying Rack-based Apps
=========================

Heroku supports [Rack](http://rack.rubyforge.org/) and Rack-based web
frameworks like [Sinatra](http://www.sinatrarb.com/),
[Merb](http://merbivore.com/), [Ramaze](http://ramaze.net/), and
[Camping](http://camping.rubyforge.org/files/README.html).

To run a Rack-based app, include a rackup file named `config.ru` in the app's
root directory. The `config.ru` file convention has become common, so most
existing Rack applications should not require changes to deploy to Heroku.

Creating and Deploying Pure Rack Apps
-------------------------------------

First, create a new directory and write a simple `config.ru` file:

    :::term
    $ mkdir hello
    $ cd hello
    $ cat > config.ru
    run lambda { |env| [200, {'Content-Type'=>'text/plain'}, StringIO.new("Hello World!\n")] }
    [Ctrl-D]

Test it locally:

    :::term
    $ gem install rack
    $ rackup -p 9292 config.ru &
    $ curl http://localhost:9292
    Hello World!
    $ kill %1

Deploy to Heroku:

    :::term
    $ git init
    $ git add .
    $ git commit -m 'pure rack app'
    $ heroku create
    $ git push heroku master

The app is now deployed to Heroku. Test by executing `heroku open` or by
visiting your app's URL in your browser. You should see *Hello, World!*.

Sinatra
-------

hello.rb:

    :::ruby
    require 'sinatra'

    get '/' do
      "Hello World!"
    end

config.ru:

    :::ruby
    require 'hello'
    run Sinatra::Application

.gems:

    :::ruby
    sinatra

Merb
----

The following `config.ru` file can be used for all Merb apps.

    :::ruby
    require 'merb-core'
    Merb::Config.setup(:merb_root => ".", :environment => ENV['RACK_ENV'])
    Merb.environment = Merb::Config[:environment]
    Merb.root = Merb::Config[:merb_root]
    Merb::BootLoader.run

    use Merb::Rack::Static, Merb.dir_for(:public)
    run Merb::Rack::Application.new

.gems:

    :::ruby
    merb-core

Ramaze
------

hello.rb:

    :::ruby
    require 'ramaze'

    class MainController < Ramaze::Controller
      def index
         "Hello World!"
      end
    end

config.ru:

    :::ruby
    require ::File.expand_path('../hello', __FILE__)
    Ramaze.start(:file => __FILE__, :started => true)
    run Ramaze

.gems:

    :::ruby
    ramaze

Camping
-------

`hello.rb`:

    :::ruby
    require 'camping'

    Camping.goes :Hello

    module Hello::Controllers
      class Index < R '/'
         def get
            render :hello
         end
      end
    end

    module Hello::Views
      def hello
         p  "Hello World!"
      end
    end

`config.ru`:

    :::ruby
    require 'hello'
    run Rack::Adapter::Camping.new(Hello)

.gems:

    :::ruby
    camping


NOTE: Camping 2.0 does not require the Rack adapter; use `run Hello` instead.

Using ActiveRecord
------------------

Rails or Merb will automatically read `config/database.yml`, which is written
with the PostgreSQL config information at compile time.  For other frameworks,
put this code into your application to access the database with ActiveRecord:

    :::ruby
    require 'activerecord'

    dbconfig = YAML.load(File.read('config/database.yml'))
    ActiveRecord::Base.establish_connection dbconfig['production']

For local development, you should create a `config/database.yml` file in your
which contains a pointer to your local database.  A good technique is to
copy `config/database.yml` from a blank Rails app, which uses the SQLite
database `db/development.sqlite3`.

Using DataMapper or Sequel
--------------------------

DataMapper and Sequel both use database URLs instead of config hashes.  You
could read `config/database.yml` and construct the URL, but an easier way is to
use the `DATABASE_URL` environment variable set by Heroku.

For DataMapper:

    :::ruby
    require 'rubygems'
    DataMapper.setup(:default, ENV['DATABASE_URL'] || 'sqlite3://my.db')

For Sequel:

    :::ruby
    require 'sequel'
    Sequel.connect(ENV['DATABASE_URL'] || 'sqlite://my.db')

This defaults to a SQLite database named `my.db` when no `DATABASE_URL` is set.
You can also make use of the `DATABASE_URL` environment variable when running
locally or on another host. For example:

    :::term
    $ DATABASE_URL='mysql://user:pass@localhost/mydb' thin start --rackup config.ru
