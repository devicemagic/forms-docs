Processes
=========

Heroku runs and manages your application's web, worker, and other types of processes, distributed across our dyno grid.

Listing processes
-----------------

Get a list of processes on a given app:

    $ heroku ps
    UPID     Slug          Command                     State       Since
    -------  ------------  --------------------------  ----------  ---------
    694450   e5ddae4_6088  dj                          starting    5s ago
    626039   c444bfb_4753  dyno                        up          8h ago
    621079   c444bfb_4753  dyno                        up          7h ago

The unix [watch utility](http://www.thegeekstuff.com/2010/05/watch-command-examples/) can be very handy in combination with the ps command.  Run `watch heroku ps` in one terminal while you add or remove dynos and workers, deploy, or restart your app.

Crashed process restarts
------------------------

In normal operation, dynos and workers never exit on their own; they are restarted when you deploy new code, change config vars, or run `heroku restart`.  The cases when a process can exit are as follows:

* Defect in startup code - If your app is missing a gem, or has any other problem during startup, it will exit immediately with a stack trace.
* Transient error on a resource used during startup - If your app accesses a resource during startup, and that resource is offline, it may exit.  For example, if you're using Amazon RDS as your database and didn't create a security group ingress for your Heroku app, your app will generate an error or time out trying to boot.
* Segfault in a binary gem - If a binary gem such as Nokogiri (which relies on libXML) crashes, it will take the whole Ruby VM with it.  Exception handling can't trap it, so your process will die.
* Ruby VM bug - The rare case of a bug in Ruby itself can take down your process.

As app developers, we tend to see the first two errors as "boot crashes" and the second two as "runtime crashes."  However, Heroku has [no way](http://en.wikipedia.org/wiki/Halting_problem) to distinguish these.  From the platform's perspective, all process crashes are alike.

Heroku's process restart policy is to try to restart crashed processes once every ten minutes.  This means that if you push bad code that prevents your app from booting, your app will be started once, then restarted, then get a cool-off of ten minutes.  In the normal case of a long-running web or worker process getting an occassional crash, it will be restarted instantly without any intervention on your part.  If your process crashes twice in a row, it will stay down for ten minutes before the system retries.

