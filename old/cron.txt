Cron jobs
=========

[Cron][cron] is available as an [add-on][addons], in daily and hourly options.

You can use cron to execute periodic background jobs by making available a Rake task named `cron`.
Once you [enable either cron add-on][cron], Heroku will execute `rake cron` under your application
path with the chosen periodicity.

To create your cron task in Rails, create a `lib/tasks/cron.rake` file with the contents of the
example below, customizing it to your needs. For applications built on top of other frameworks,
you may just append the task code to your existing `Rakefile`. If you don't have a `Rakefile`,
start with a blank one.

Note that the task is specified in Ruby code, so you can further control the rate of cron execution
by checking the current hour. This is useful if you want your task to run more often than every
24 hours, but not every hour.

Cron jobs execute based on when you enabled the add-on.  For example if you add the add-on @ 9:35,
hourly cron will operate each hour at 35 minutes past, and daily cron at 9:35 each day.

### Example task

    :::ruby
    desc "This task is called by the Heroku cron add-on"
    task :cron => :environment do
     if Time.now.hour % 4 == 0 # run every four hours
       puts "Updating feed..."
       NewsFeed.update
       puts "done."
     end
     if Time.now.hour == 0 # run at midnight
       User.send_reminders
     end
    end

To see recent results of your cron execution, type:

    :::term
    $ heroku logs:cron


[addons]: /addons
[cron]: http://addons.heroku.com/cron
