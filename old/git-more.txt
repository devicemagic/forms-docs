More Git Stuff
==============

`.gitignore`
------------

All code (Ruby, ERB, Javascript), plugins, non-binary gems, small static assets
(CSS, images), and most config files should be checked into your Git repo for
deploy to Heroku.  Anything else, such as log files, large static assets, or
SQLite database files should be ignored via one or more `.gitignore` files in your
repo.

Ignoring log and tmp
--------------------

A standard Rails app should generally ignore the contents of the log and tmp
directories.  In this example, we'll use the approach if ignoring `*.log` within
the log folder, and ignoring the `tmp` folder altogether (Rails will create it the
first time it runs):

    :::term
    $ git rm -r -f log
    rm 'log/development.log'
    rm 'log/production.log'
    rm 'log/server.log'
    rm 'log/test.log'
    $ git rm -r -f tmp
    fatal: pathspec 'tmp' did not match any files
    $ mkdir log
    $ echo '*.log' > log/.gitignore
    $ git add log
    $ echo tmp >> .gitignore
    $ git add .gitignore
    $ git commit -m "ignored log files and tmp dir"

Ignoring SQLite files
---------------------

If you use SQLite for your local database (which is the default for a fresh
Rails app created with the rails command), you should ignore the resulting
database files.  Here's one way to do so:

    :::term
    $ git rm -f db/*.sqlite3
    $ echo '*.sqlite3' >> .gitignore
    $ git add .gitignore
    $ git commit -m "ignored sqlite databases"

Further reading
---------------

[http://www.kernel.org/pub/software/scm/git/docs/gitignore.html](http://www.kernel.org/pub/software/scm/git/docs/gitignore.html)

Cloning a local copy of a Heroku app
------------------------------------

You've been working on your Heroku app from your work computer.  Now you're
home, and you want to grab a copy of your code to keep working.  You could copy
it from your work computer, but it's easier to clone from Heroku using the app's
git url:

    :::term
    $ git clone -o heroku git@heroku.com:appname.git

The `-o` flag sets the remote name to heroku instead of origin, to make it
consistent with the manually added remote setup specified earlier.

